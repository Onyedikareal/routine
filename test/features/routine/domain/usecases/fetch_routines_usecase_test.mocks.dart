// Mocks generated by Mockito 5.2.0 from annotations
// in routine2/test/features/routine/domain/usecases/fetch_routines_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:routine2/core/error/failure.dart' as _i5;
import 'package:routine2/features/routine/domain/entity/routine_entity.dart'
    as _i6;
import 'package:routine2/features/routine/domain/repository/routine_repository_impl.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [RoutineRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoutineRepository extends _i1.Mock implements _i3.RoutineRepository {
  MockRoutineRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Routine>> addRoutine(
          {String? title,
          String? description,
          String? routineTime,
          bool? completed,
          bool? routineExpired,
          String? routineFrequency}) =>
      (super.noSuchMethod(
              Invocation.method(#addRoutine, [], {
                #title: title,
                #description: description,
                #routineTime: routineTime,
                #completed: completed,
                #routineExpired: routineExpired,
                #routineFrequency: routineFrequency
              }),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Routine>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Routine>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Routine>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> deleteRoutine({int? routineId}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteRoutine, [], {#routineId: routineId}),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> markRoutineDone({int? routineId}) =>
      (super.noSuchMethod(
              Invocation.method(#markRoutineDone, [], {#routineId: routineId}),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> updateRoutine(
          {int? routineId,
          String? title,
          String? description,
          bool? routineExpired}) =>
      (super.noSuchMethod(
              Invocation.method(#updateRoutine, [], {
                #routineId: routineId,
                #title: title,
                #description: description,
                #routineExpired: routineExpired
              }),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Routine>>> fetchRoutines() =>
      (super.noSuchMethod(Invocation.method(#fetchRoutines, []),
          returnValue: Future<_i2.Either<_i5.Failure, List<_i6.Routine>>>.value(
              _FakeEither_0<_i5.Failure, List<_i6.Routine>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.Routine>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Routine>> fetchRoutineWithID(
          {int? routineID}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchRoutineWithID, [], {#routineID: routineID}),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.Routine>>.value(
              _FakeEither_0<_i5.Failure, _i6.Routine>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.Routine>>);
}
